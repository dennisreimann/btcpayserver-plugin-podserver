// <auto-generated />
using System;
using BTCPayServer.Plugins.PodServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BTCPayServer.Plugins.PodServer.Data.Migrations
{
    [DbContext(typeof(PodServerPluginDbContext))]
    [Migration("20220919123033_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("BTCPayServer.Plugins.PodServer")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Contribution", b =>
                {
                    b.Property<string>("ContributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("EpisodeId")
                        .HasColumnType("text");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PodcastId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<int>("Split")
                        .HasColumnType("integer");

                    b.HasKey("ContributionId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PodcastId", "EpisodeId", "PersonId")
                        .IsUnique();

                    b.ToTable("Contributions", "BTCPayServer.Plugins.PodServer");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Editor", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("PodcastId")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "PodcastId");

                    b.HasIndex("PodcastId");

                    b.ToTable("Editors", "BTCPayServer.Plugins.PodServer");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Enclosure", b =>
                {
                    b.Property<string>("EnclosureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("EpisodeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAlternate")
                        .HasColumnType("boolean");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EnclosureId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("Enclosures", "BTCPayServer.Plugins.PodServer");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Episode", b =>
                {
                    b.Property<string>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageFileId")
                        .HasColumnType("text");

                    b.Property<string>("ImportGuid")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("PodcastId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SeasonId")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EpisodeId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("PodcastId", "Slug")
                        .IsUnique();

                    b.ToTable("Episodes", "BTCPayServer.Plugins.PodServer");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Import", b =>
                {
                    b.Property<string>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Log")
                        .HasColumnType("text");

                    b.Property<string>("PodcastId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Raw")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ImportId");

                    b.HasIndex("PodcastId");

                    b.ToTable("Imports", "BTCPayServer.Plugins.PodServer");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Person", b =>
                {
                    b.Property<string>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ImageFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PodcastId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("PersonId");

                    b.HasIndex("PodcastId");

                    b.ToTable("People", "BTCPayServer.Plugins.PodServer");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Podcast", b =>
                {
                    b.Property<string>("PodcastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ImageFileId")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("PodcastId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Podcasts", "BTCPayServer.Plugins.PodServer");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Season", b =>
                {
                    b.Property<string>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("PodcastId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SeasonId");

                    b.HasIndex("PodcastId", "Number")
                        .IsUnique();

                    b.ToTable("Seasons", "BTCPayServer.Plugins.PodServer");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Contribution", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.PodServer.Data.Models.Episode", "Episode")
                        .WithMany("Contributions")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BTCPayServer.Plugins.PodServer.Data.Models.Person", "Person")
                        .WithMany("Contributions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BTCPayServer.Plugins.PodServer.Data.Models.Podcast", "Podcast")
                        .WithMany("Contributions")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Person");

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Editor", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.PodServer.Data.Models.Podcast", "Podcast")
                        .WithMany("Editors")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Enclosure", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.PodServer.Data.Models.Episode", "Episode")
                        .WithMany("Enclosures")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Episode", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.PodServer.Data.Models.Podcast", "Podcast")
                        .WithMany("Episodes")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BTCPayServer.Plugins.PodServer.Data.Models.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Podcast");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Import", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.PodServer.Data.Models.Podcast", "Podcast")
                        .WithMany("Imports")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Person", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.PodServer.Data.Models.Podcast", "Podcast")
                        .WithMany("People")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BTCPayServer.Plugins.PodServer.Data.Models.ValueRecipient", "ValueRecipient", b1 =>
                        {
                            b1.Property<string>("PersonId")
                                .HasColumnType("text");

                            b1.Property<string>("Address")
                                .HasColumnType("text");

                            b1.Property<string>("CustomKey")
                                .HasColumnType("text");

                            b1.Property<string>("CustomValue")
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PersonId");

                            b1.ToTable("People", "BTCPayServer.Plugins.PodServer");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Podcast");

                    b.Navigation("ValueRecipient");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Season", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.PodServer.Data.Models.Podcast", "Podcast")
                        .WithMany("Seasons")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Episode", b =>
                {
                    b.Navigation("Contributions");

                    b.Navigation("Enclosures");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Person", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Podcast", b =>
                {
                    b.Navigation("Contributions");

                    b.Navigation("Editors");

                    b.Navigation("Episodes");

                    b.Navigation("Imports");

                    b.Navigation("People");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.PodServer.Data.Models.Season", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
